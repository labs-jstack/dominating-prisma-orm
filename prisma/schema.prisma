generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid()) @db.Uuid
  name         String
  email        String  @unique
  age          Int?
  isActive     Boolean @default(true) @map("is_active")
  affiliatedId String? @db.Uuid

  affiliatedTo User?  @relation("affiliate", fields: [affiliatedId], references: [id])
  affiliateds  User[] @relation("affiliate")

  profile Profile?
  orders  Order[]

  @@index([name])
  @@map("users")
}

model Profile {
  id        String  @id @default(uuid()) @db.Uuid
  userId    String  @unique @map("user_id") @db.Uuid
  instagram String?
  github    String?
  bio       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Order {
  id     String @id @default(uuid()) @db.Uuid
  value  Float
  userId String @map("user_id") @db.Uuid

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  products OrderProduct[]

  @@map("orders")
}

model Product {
  id     String         @id @default(uuid()) @db.Uuid
  name   String
  orders OrderProduct[]

  @@map("products")
}

model OrderProduct {
  orderId   String @map("order_id") @db.Uuid
  productId String @map("product_id") @db.Uuid
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
  @@map("orders_products")
}
